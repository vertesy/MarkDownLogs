{
  "name": "MarkdownReports",
  "tagline": "An R function library to create scientific figures and reports easily.",
  "body": "\r\n _cite via:_ [![DOI](https://zenodo.org/badge/20391/vertesy/MarkdownReports.svg)](https://zenodo.org/badge/latestdoi/20391/vertesy/MarkdownReports)\r\n\r\n\r\n\r\n## News\r\n\r\n### Version 3.1.1 is ready and installed by the default. \r\n\r\n1. See legacy/old version at: https://github.com/vertesy/MarkdownReports.v2.9.5\r\n2. See development version at: https://github.com/vertesy/MarkdownReportsDev\r\n\r\n\r\n### New features\"\r\n\r\n- **Function argument names now mirror the `R base` argument names (99%).**\r\n\r\n  - Think of `xlb >>> xlab`, or  `sub_ >>> sub`\r\n- This however breaks the compatibility with earlier versions, so you might need to replace some function arguments\r\n- **The package now can also work with png images.**\r\n\r\n  - You can save files in png, which can be displayed inside the markdown file on windows 7.\r\n\r\n  - You need to set `b.usepng=T` in `setup_MarkdownReports`: `setup_MarkdownReports(OutDir = \"/Users/...blabla....\", b.usepng=T)`\r\n- The package contains multiple other bug fixes:\r\n\r\n  - Self consistency: some missing functions moved from `CodeAndRoll.R` \r\n  - Table writing functions `md.tableWriter.DF.w.dimnames()` and `md.tableWriter.VEC.w.names()`\r\n- Enhancements: \r\n\r\n  - `filter_HP(), filter_LP(), filter_MidPass()` show histogram\r\n  - `whist()` can invite the above filter functions.\r\n- Numerous other small fixes.\r\n\r\n\r\n\r\n**Old version** is under `MarkdownReports.LEGACY.VERSION`.\r\n\r\n\r\n\r\n## What is ***MarkdownReports***?\r\n\r\n\r\nMarkdownReports is a set of **R** functions that allows you to generate precise figures easily, and create clean reports in markdown language about what you just discovered with your analysis script. It helps you to:\r\n\r\n\r\n1. Create scientifically accurate figures and save them automatically as vector graphic (.pdf), that you can use from presentation to posters anywhere.\r\n2. Note down your findings easily in a clear and nicely formatted way, parsed from your variables into english sentences.\r\n- Link & display your figures automatically inside your report, right there where they are needed.\r\n- Version your findings, annotating which parameters were used to reach certain results.\r\n- Share your report with others via email, Github or a personal website.\r\n\r\n\r\n## Why did I make it & why you might like it too?\r\n\r\nI do exploratory data analysis as a daily routine, and I have constant interaction with all sorts of people: supervisors, collaborators, colleagues, etc. \r\n\r\nI often have to...\r\n\r\n1. ...write emails summarising the results (text & figures) of the last few days.\r\n2. ...find results from a couple of month back, with all tiny details (parameters used, etc).\r\n3. ...assemble each step I did that day into a logical story line, that others can understand at first glimpse, e.g.: *I observed X; I controlled for Y; Hypothesised explanation A; Falsified it; Came up with explanation B; Tested & proven it...*\r\n\r\nFor all of the above, my solution is MarkdownReports. I think its better than other solutions I found. Many of those like to combine source code with results, and many are too complex to use. Most of people I interact with are not interested in  the source code, but are very keen on seeing my results from all possible angles and are asking detailed questions about the analysis.\r\n\r\n\r\n\r\n### Differences to Rmarkdown:\r\n\r\n\r\n- It is intended for a **different purpose**: \r\n  - **MarkdownReports** is written for **rapid progress reporting**, whereas\r\n  - **Rmarkdown** is perfect for writing **analytical explanations** on \"*how do you analyse this?*\" and writing longer books.\r\n- **Much faster to report in MarkdownReports:** \r\n  - You **parse your report on the fly** from **directly your working script**. (\r\n  - *In Rmarkdown you would make a separate cleaned-up a script, that you then knit as a separate step.*\r\n- **No hassle of** executing computation in **isolated code-blocks** (and importing all relevant variables there). *Your code is also a lot easier to follow because it is not split up in blocks.*\r\n\r\n### Where does ***MarkdownReports*** stand out?\r\n\r\n- **Pure markdown output**, compatible, simple and elegant layout.\r\n- Integration of text, figures and tables with ***very* few lines of extra code.**\r\n- Easy generation of **precise figures** (axis labels, coloring by filtering etc), a big enhancement over base graphics, while maintaining 90% of its syntax.\r\n- **Plots are both displayed and saved as a vector graphic** (pdf), making it scalable for presentations, posters, etc\r\n- **Traceable results**:\r\n  - **PDF plots are labeled by the script generating them** in the title field: `Filter.and.Stats by ExpressionAnalysis.R`\r\n  - The **report** file is automatically **named after the R-script, and date** so that it is linked to the source code that generated it.\r\n  - Simply **log all used settings** into a markdown table by the `log_settings_MarkDown()` and the ` md.LogSettingsFromList()`functions.\r\n- it **natively exports tables** from R to Markdown\r\n- A timestamped subdirectory is created that you can backup once satisfied with your results.\r\n- **Github Compatibility:**The generated report is easy to [share on a GitHub wiki](https://github.com/vertesy/MarkdownReports/wiki/Github-wiki-integration). \r\n- It **parses and writes full sentences** to the report from operations you perform.  \r\n  - For instance filter on gene expression level: \r\n```R\r\nGeneExpression = rnorm(2000, mean = 100, sd=50); \r\nMinExpression=125\r\nPASS=filter_HP(GeneExpression, threshold = MinExpression)\r\n```\r\nand your report will have the summary: ***30.7 % or 614 of 2000 entries in GeneExpression fall above a threshold value of: 125.***\r\n\r\n- **Enhanced productivity** features:\r\n  - **Error bars** are handled by `wbarplot()` natively.\r\n  - Add an labels to bars in a barplot by `barplot_label()`. \r\n  - Native **2-D error bars** in scatterplots`wplot()` .\r\n  - Easy **colour schemes** by `wcolorize()` from  `base`, `gplots` and `Rcolorbrewer`.\r\n  - Add **legends** with the super short command `wlegend(colannot$categ)`, defining colors named after the categories of your data. \r\n    - It is autmatically created by `colannot = wcolorize(your.annotation, ReturnCategoriesToo = T)`, which you (can) anyways use to colour data points on, say, your scatterplot.\r\n  - **Show filtering results with a one liner**: `whist(rnorm(1000), vline = .5, filtercol = T)`.\r\n- *Although **currently** plotting is implemented as an enhanced **base graphic**, but the concept could easily be extended to **ggplot**.*  \r\n  Yet, you can still use ggplot, because you equally well save and report them by either `wplot_save_this()` or the `pdfA4plot_on()` and `pdfA4plot_off()` functions.\r\n- It is all achieved in ~ 1600 lines of well documented code compiled into a proper R-package.\r\n- â€‹\r\n\r\n\r\n<br><br>\r\n## Installation\r\n\r\nInstall directly from **GitHub** via **devtools** with one R command:\r\n\r\n    # install.packages(\"devtools\"); # If you don't have it\r\n    require(\"devtools\")\r\n    devtools::install_github(repo = \"vertesy/MarkdownReports/MarkdownReports\")\r\n\r\n...then simply load the package:\r\n\r\n    require(\"MarkdownReports\")\r\n\r\nAlternatively, you simply source it from the web. \r\n*This way function help will not work, and you will have no local copy of the code on your hard drive.*\r\n\r\n    source(\"https://raw.githubusercontent.com/vertesy/MarkdownReports/master/MarkdownReports/R/MarkdownReports.R\")\r\n\r\n<br><br>\r\n## Discover 4 Yourself!\r\n\r\n-  **Check out the [wiki](https://github.com/vertesy/MarkdownReports/wiki)!** \r\n   - See [how easy it is to make customized figures](https://github.com/vertesy/MarkdownReports/wiki/MarkdownReports_in_Action.r.log).\r\n   - See [the list of functions in the package.](https://github.com/vertesy/MarkdownReports/wiki/Function-Overview)\r\n-  **Check the example**: \r\n   -  Check out a dummy [R script](https://github.com/vertesy/MarkdownReports/blob/master/Examples/Usage_Example_Script.R) and the \r\n   -  [MarkDown report](https://github.com/vertesy/MarkdownReports/blob/master/Examples/Usage_Example_Script/Usage_Example_Script.R.log.md) it generates inside this [GitHub Repo](https://github.com/vertesy/MarkdownReports).\r\n-  [**Browse the list of functions**.](https://github.com/vertesy/MarkdownReports/wiki)\r\n-  [**Browse the code** of the functions.](https://github.com/vertesy/MarkdownReports/blob/master/MarkdownReports/R/MarkdownReports.R)\r\n\r\n\r\n### Learn about the markdown format\r\n\r\n- See the power and simplicity of markdown format [explained on Github](https://guides.github.com/features/mastering-markdown)\r\n- Checkout some cool markdown editors, like [MOU](http://25.io/mou/), [Typora](https://typora.io/), or [markdownpad](http://markdownpad.com/).\r\n- See how these markdown reports are rendered:\r\n\r\n![SNP filter and code.png](https://raw.githubusercontent.com/vertesy/MarkdownReports/master/SNP%20filter%20and%20code.png)\r\n\r\n\r\n\r\n\r\n <br/><br/>\r\n#### Cite it via its Digital Object Identifier (DOI): \r\n\r\n[![DOI](https://zenodo.org/badge/20391/vertesy/MarkdownReports.svg)](https://zenodo.org/badge/latestdoi/20391/vertesy/MarkdownReports)\r\n\r\nAbel Vertesy. (2017, October 17). MarkdownReports: An R function library to create scientific figures and markdown reports easily. (Version v2.9.5). Zenodo. http://doi.org/10.5281/zenodo.594683\r\n\r\n\r\n<br>\r\n\r\n**MarkdownReports** is a project of @vertesy.\r\n\r\n <br/> <br/> <br/> <br/> <br/>\r\n[*edit the website*](https://github.com/vertesy/MarkdownReports/generated_pages/new)\r\n",
  "google": "UA-74286663-3",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}